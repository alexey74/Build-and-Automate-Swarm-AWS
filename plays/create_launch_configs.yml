---

- name: Check if the ASG exists
  hosts: localhost
  gather_facts: no
  tasks:

    - set_fact:
        asg_exists: false
      delegate_facts: true
      delegate_to: localhost

    - ec2_asg_facts:
        name: "{{prefix}}-swarm-manager-asg"
      register: asgs

    - set_fact:
        asg_exists: true
      when: asgs.results[0] is defined
      delegate_facts: true
      delegate_to: localhost

- name: Prerequisites for Docker Swarm
  hosts: localhost
  gather_facts: no
  tasks:

    # Make sure the security group is there
    - name: Create Security Group
      ec2_group:
        name: Docker Swarm Full Trust
        description: All nodes within the docker swarm should have full trust with each other and deny entry by anything outside.
        region: "{{ region }}"
        vpc_id: "{{ vpc_id }}"
      register: group

    - name: Assign Full Trust to Self
      ec2_group:
        name: Docker Swarm Full Trust
        group_id: "{{group.group_id}}"
        description: All nodes within the docker swarm should have full trust with each other and deny entry by anything outside.
        rules:
          - proto: all
            group_id: "{{group.group_id}}"
            ports:
              - 0-65535
          - proto: tcp
            group_id: "{{lb_security_group}}"
            ports:
              - 0-65535
          - proto: tcp
            group_id: "{{group.group_id}}"
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0

    # Get instance ids for template

    - name: Check default node image status
      ec2_instance_facts:
        region: "{{ region }}"
        filters:
          "instance-state-name": running
          "tag:swarm_role": node_template
      register: default_node

    - set_fact:
        default_node_ip: "{{default_node.instances[0].network_interfaces[0].private_ip_address}}"
        default_node_id: "{{default_node.instances[0].instance_id}}"
        default_node_dns_name: "{{default_node.instances[0].network_interfaces[0].private_dns_name}}"
      when:
        - default_node is defined
        - default_node.instances is defined
        - default_node.instances[0] is defined
        - default_node.instances[0].instance_id is defined
        - default_node.instances[0].network_interfaces[0] is defined

    # Create nodes if they don't exist

    - name: Create default node Image
      ec2:
        region: "{{ region }}"
        key_name: "{{  key  }}"
        instance_type: {{ instance_type | default('m3.medium') }}
        group_id: "{{group.group_id}}"
        image: "{{base_ami}}"
        wait: yes
        wait_timeout: 500
        count: 1
        instance_tags:
           swarm_role: node_template
           Name: "{{prefix}}_swarm_template"
        monitoring: yes
        vpc_subnet_id: "{{ vpc_zone_ids[0] }}"
        assign_public_ip: no
      register: manager_node_template
      when: hostvars['localhost']['default_node_ip'] is not defined

    - pause:
        seconds: 30
      when: hostvars['localhost']['default_node_ip'] is not defined

    # Get instance ids for template

    - name: Check default node image status
      ec2_instance_facts:
        region: "{{ region }}"
        filters:
          instance-state-name: running
          "tag:swarm_role": node_template
      register: default_node

    - set_fact:
        default_node_ip: "{{default_node.instances[0].network_interfaces[0].private_ip_address}}"
        default_node_id: "{{default_node.instances[0].instance_id}}"
        default_node_dns_name: "{{default_node.instances[0].network_interfaces[0].private_dns_name}}"
      when: default_node is defined

    # Define dynamic host groups

    - name: Define primary manager host
      add_host:
        name: "{{default_node.instances[0].network_interfaces[0].private_ip_address}}"
        ansible_user: centos
        groups: node_template

- name: Install Docker & Other Utilities
  hosts: node_template
  become: yes
  tasks:

    - shell: |
        export DOCKERURL='{{ docker_url }}'
        sh -c 'echo "$DOCKERURL/centos" > /etc/yum/vars/dockerurl'
        sudo -E yum-config-manager --add-repo "$DOCKERURL/centos/docker-ee.repo"

    - yum:
        update_cache: yes
        name:
          - lvm2
          - yum-utils
          - device-mapper-persistent-data
          - nfs-utils
          - nmap
          - lsof
          - wget

    - yum:
        name: "{{docker_version}}"
        update_cache: yes
      when: docker_url is defined

    - service:
        name: docker
        enabled: yes
        state: reloaded

- name: Create AMI of default node & setup ASG for all three groups
  hosts: localhost
  gather_facts: no
  tasks:

    - name: Create AMI from default_node
      ec2_ami:
        instance_id: "{{hostvars['localhost']['default_node_id']}}"
        wait: yes
        name: "{{prefix}}-docker-node-template"
        region: "{{ region }}"
        tags:
          Name: docker-node-template
          Billing: "{{ billing_tag }}"

    - ec2_ami_find:
        region: "{{ region }}"
        name: "{{prefix}}-docker-node-template"
      register: ami_found
      delay: 30
      retries: 300
      until:
       - ami_found.results is defined
       - ami_found.results[0] is defined
       - ami_found.results[0].ami_id is defined

    - shell: "date +'%s'"
      register: epoch

    - set_fact:
        timestamp: "{{epoch.stdout}}"
      delegate_facts: yes
      delegate_to: localhost

    - name: create manager launch config (with user_data)
      ec2_lc:
        name: "{{prefix}}-swarm-manager-launcher-{{hostvars['localhost']['timestamp']}}"
        image_id: "{{ami_found.results[0].ami_id}}"
        key_name: "{{ key }}"
        region: "{{ region }}"
        security_groups: "{{hostvars['localhost']['group']['group_id']}}"
        instance_type: m4.large
        user_data_path: "../files/{{org_name}}/user_data_manager.sh"
        assign_public_ip: no
      when: hostvars['localhost']['asg_exists'] == true

    - name: create worker launch config (with user_data)
      ec2_lc:
        name: "{{prefix}}-swarm-worker-launcher-{{hostvars['localhost']['timestamp']}}"
        image_id: "{{ami_found.results[0].ami_id}}"
        key_name: "{{ key }}"
        region: "{{ region }}"
        security_groups: "{{hostvars['localhost']['group']['group_id']}}"
        user_data_path: "../files/{{org_name}}/user_data_worker.sh"
        instance_type: m4.large
        assign_public_ip: no
      when: hostvars['localhost']['asg_exists'] == true

    - name: create dtr launch config (with user_data)
      ec2_lc:
        name: "{{prefix}}-swarm-dtr-launcher-{{hostvars['localhost']['timestamp']}}"
        image_id: "{{ami_found.results[0].ami_id}}"
        key_name: "{{ key }}"
        region: "{{ region }}"
        security_groups: "{{hostvars['localhost']['group']['group_id']}}"
        user_data_path: "../files/{{org_name}}/user_data_dtr.sh"
        instance_type: m3.medium
        assign_public_ip: no
      when: hostvars['localhost']['asg_exists'] == true

    - name: create manager launch config (no user_data - first run)
      ec2_lc:
        name: "{{prefix}}-swarm-manager-launcher-{{hostvars['localhost']['timestamp']}}"
        image_id: "{{ami_found.results[0].ami_id}}"
        key_name: "{{ key }}"
        region: "{{ region }}"
        security_groups: "{{hostvars['localhost']['group']['group_id']}}"
        instance_type: m4.large
        assign_public_ip: no
      when: hostvars['localhost']['asg_exists'] == false

    - name: create worker launch config (no user_data - first run)
      ec2_lc:
        name: "{{prefix}}-swarm-worker-launcher-{{hostvars['localhost']['timestamp']}}"
        image_id: "{{ami_found.results[0].ami_id}}"
        key_name: "{{ key }}"
        region: "{{ region }}"
        security_groups: "{{hostvars['localhost']['group']['group_id']}}"
        instance_type: m4.large
        assign_public_ip: no
      when: hostvars['localhost']['asg_exists'] == false

    - name: create dtr launch config (no user_data - first run)
      ec2_lc:
        name: "{{prefix}}-swarm-dtr-launcher-{{hostvars['localhost']['timestamp']}}"
        image_id: "{{ami_found.results[0].ami_id}}"
        key_name: "{{ key }}"
        region: "{{ region }}"
        security_groups: "{{hostvars['localhost']['group']['group_id']}}"
        instance_type: m3.medium
        assign_public_ip: no
      when: hostvars['localhost']['asg_exists'] == false

...
